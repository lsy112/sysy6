{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport * as echarts from 'echarts';\nexport default {\n  name: 'DashboardComponent',\n  // 修改组件名为多单词形式\n  data() {\n    return {\n      formData: {\n        xLabel: '',\n        yValue: null\n      },\n      chartData: [{\n        name: '类别1',\n        value: 10\n      }, {\n        name: '类别2',\n        value: 20\n      }, {\n        name: '类别3',\n        value: 50\n      }, {\n        name: '类别4',\n        value: 100\n      }]\n    };\n  },\n  methods: {\n    submitForm() {\n      if (this.formData.xLabel.trim() === '' || this.formData.yValue === null) {\n        alert('请填写完整的横纵坐标数据');\n        return;\n      }\n      this.chartData.push({\n        name: this.formData.xLabel,\n        value: this.formData.yValue\n      });\n      this.renderChart();\n    },\n    renderChart() {\n      const chartDom = document.getElementById('chart');\n      if (!chartDom) return; // 确保DOM元素存在\n      const myChart = echarts.init(chartDom);\n      let option = {\n        xAxis: {\n          type: 'category',\n          data: this.chartData.map(item => item.name)\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: this.chartData.map(item => item.value),\n          type: 'bar'\n        }]\n      };\n      myChart.setOption(option);\n    }\n  },\n  mounted() {\n    this.renderChart();\n  }\n};","map":{"version":3,"names":["echarts","name","data","formData","xLabel","yValue","chartData","value","methods","submitForm","trim","alert","push","renderChart","chartDom","document","getElementById","myChart","init","option","xAxis","type","map","item","yAxis","series","setOption","mounted"],"sources":["D:\\vscode1\\zp\\vue-project\\src\\components\\DashboardComponent.vue"],"sourcesContent":["<template>\r\n    <div class=\"dashboard\">\r\n      <!-- 数据输入部分 -->\r\n      <el-form ref=\"form\" :model=\"formData\" label-width=\"80px\">\r\n        <el-form-item label=\"横坐标\">\r\n          <el-input v-model=\"formData.xLabel\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"纵坐标\">\r\n          <el-input v-model.number=\"formData.yValue\"></el-input>\r\n        </el-form-item>\r\n        <el-button type=\"primary\" @click=\"submitForm\">提交</el-button>\r\n      </el-form>\r\n  \r\n      <!-- 图表部分 -->\r\n      <div id=\"chart\" style=\"width: 600px; height: 400px;\"></div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import * as echarts from 'echarts';\r\n  \r\n  export default {\r\n    name: 'DashboardComponent', // 修改组件名为多单词形式\r\n    data() {\r\n      return {\r\n        formData: {\r\n          xLabel: '',\r\n          yValue: null,\r\n        },\r\n        chartData: [\r\n          { name: '类别1', value: 10 },\r\n          { name: '类别2', value: 20 },\r\n          { name: '类别3', value: 50 },\r\n          { name: '类别4', value: 100 }\r\n        ]\r\n      };\r\n    },\r\n    methods: {\r\n      submitForm() {\r\n        if (this.formData.xLabel.trim() === '' || this.formData.yValue === null) {\r\n          alert('请填写完整的横纵坐标数据');\r\n          return;\r\n        }\r\n        this.chartData.push({ name: this.formData.xLabel, value: this.formData.yValue });\r\n        this.renderChart();\r\n      },\r\n      renderChart() {\r\n        const chartDom = document.getElementById('chart');\r\n        if (!chartDom) return; // 确保DOM元素存在\r\n        const myChart = echarts.init(chartDom);\r\n        let option = {\r\n          xAxis: {\r\n            type: 'category',\r\n            data: this.chartData.map(item => item.name)\r\n          },\r\n          yAxis: {\r\n            type: 'value'\r\n          },\r\n          series: [{\r\n            data: this.chartData.map(item => item.value),\r\n            type: 'bar'\r\n          }]\r\n        };\r\n  \r\n        myChart.setOption(option);\r\n      }\r\n    },\r\n    mounted() {\r\n      this.renderChart();\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .dashboard {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  </style>\r\n  "],"mappings":";;AAmBE,OAAO,KAAKA,OAAM,MAAO,SAAS;AAElC,eAAe;EACbC,IAAI,EAAE,oBAAoB;EAAE;EAC5BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,MAAM,EAAE,EAAE;QACVC,MAAM,EAAE;MACV,CAAC;MACDC,SAAS,EAAE,CACT;QAAEL,IAAI,EAAE,KAAK;QAAEM,KAAK,EAAE;MAAG,CAAC,EAC1B;QAAEN,IAAI,EAAE,KAAK;QAAEM,KAAK,EAAE;MAAG,CAAC,EAC1B;QAAEN,IAAI,EAAE,KAAK;QAAEM,KAAK,EAAE;MAAG,CAAC,EAC1B;QAAEN,IAAI,EAAE,KAAK;QAAEM,KAAK,EAAE;MAAI;IAE9B,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACN,QAAQ,CAACC,MAAM,CAACM,IAAI,CAAC,MAAM,EAAC,IAAK,IAAI,CAACP,QAAQ,CAACE,MAAK,KAAM,IAAI,EAAE;QACvEM,KAAK,CAAC,cAAc,CAAC;QACrB;MACF;MACA,IAAI,CAACL,SAAS,CAACM,IAAI,CAAC;QAAEX,IAAI,EAAE,IAAI,CAACE,QAAQ,CAACC,MAAM;QAAEG,KAAK,EAAE,IAAI,CAACJ,QAAQ,CAACE;MAAO,CAAC,CAAC;MAChF,IAAI,CAACQ,WAAW,CAAC,CAAC;IACpB,CAAC;IACDA,WAAWA,CAAA,EAAG;MACZ,MAAMC,QAAO,GAAIC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;MACjD,IAAI,CAACF,QAAQ,EAAE,OAAM,CAAE;MACvB,MAAMG,OAAM,GAAIjB,OAAO,CAACkB,IAAI,CAACJ,QAAQ,CAAC;MACtC,IAAIK,MAAK,GAAI;QACXC,KAAK,EAAE;UACLC,IAAI,EAAE,UAAU;UAChBnB,IAAI,EAAE,IAAI,CAACI,SAAS,CAACgB,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACtB,IAAI;QAC5C,CAAC;QACDuB,KAAK,EAAE;UACLH,IAAI,EAAE;QACR,CAAC;QACDI,MAAM,EAAE,CAAC;UACPvB,IAAI,EAAE,IAAI,CAACI,SAAS,CAACgB,GAAG,CAACC,IAAG,IAAKA,IAAI,CAAChB,KAAK,CAAC;UAC5Cc,IAAI,EAAE;QACR,CAAC;MACH,CAAC;MAEDJ,OAAO,CAACS,SAAS,CAACP,MAAM,CAAC;IAC3B;EACF,CAAC;EACDQ,OAAOA,CAAA,EAAG;IACR,IAAI,CAACd,WAAW,CAAC,CAAC;EACpB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}